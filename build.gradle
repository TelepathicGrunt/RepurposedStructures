buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

jarJar.enable()

version = "${mod_version}+${mc_version}"
group = "com.telepathicgrunt"
archivesBaseName = "${modid}_forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    api {}
}

minecraft {
    mappings channel: "official", version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
   
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=" + project.getProperty('modid') + ".mixins.json"
            mods { repurposed_structures { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=" + project.getProperty('modid') + ".mixins.json"
            mods { repurposed_structures { source sourceSets.main } }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', project.getProperty('modid'), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            arg "-mixin.config=" + project.getProperty('modid') + ".mixins.json"
            mods { repurposed_structures { source sourceSets.main } }
        }
    }
}

repositories {
    maven { url "https://nexus.resourcefulbees.com/repository/telepathicgrunt/" }
    maven { url "https://www.cursemaven.com" }
    maven { url "https://api.modrinth.com/maven/" }
    maven {
        url "https://maven.architectury.dev/"
    }
    maven {
        url = 'https://jitpack.io'
        content {
            includeGroup 'com.github.llamalad7.mixinextras'
        }
    }
    maven {
        url "https://maven.shedaniel.me"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    runtimeOnly fg.deobf("com.telepathicgrunt:StructureVoidToggle-Forge:4.0.2+1.19")
    runtimeOnly fg.deobf("com.telepathicgrunt:CommandStructures-Forge:3.1.0+1.19")
    runtimeOnly fg.deobf("curse.maven:hugestructureblock-474114:3836266")
    // compileOnly fg.deobf("curse.maven:async_locator-625069:3816310") // v1.0.1

    //runtimeOnly fg.deobf("curse.maven:byg-247560:4027228")
    //runtimeOnly fg.deobf("curse.maven:terrablender-563928:4013816")
    //runtimeOnly fg.deobf("curse.maven:better_monuments-689238:4031366")
    //runtimeOnly fg.deobf("curse.maven:yungs_api-421850:4031185")
    //runtimeOnly fg.deobf("curse.maven:better_strongholds-465575:4031213")
    //runtimeOnly fg.deobf("curse.maven:yungs_api-421850:4031185")
    //runtimeOnly fg.deobf("curse.maven:domesticationinnovation-591149:3904628")
    //runtimeOnly fg.deobf("curse.maven:citadel-331936:3902867")
    //runtimeOnly fg.deobf("curse.maven:terralith-513688:3874530")
    //runtimeOnly fg.deobf("curse.maven:williamwythersoverhauledoverworld-490686:3868321")
    //runtimeOnly fg.deobf("curse.maven:xaeroworldmap-317780:3835797")
    //runtimeOnly fg.deobf("curse.maven:xaerominimap-263420:3835776")
    //runtimeOnly fg.deobf("curse.maven:friends_and_foes-602059:3827719")
    //runtimeOnly fg.deobf("dev.architectury:architectury-forge:5.7.27")
    //runtimeOnly fg.deobf("curse.maven:morevillagers-484954:3833536")
    //runtimeOnly fg.deobf("curse.maven:lootr-361276:3824244")
    //runtimeOnly fg.deobf("curse.maven:advanced_peripherals-431725:3799046")
    //runtimeOnly fg.deobf("curse.maven:cc_tweaked-282001:3770724")
    //runtimeOnly fg.deobf("curse.maven:the_twilight_forest-227639:3818688")

    // 1.18.2
    //runtimeOnly fg.deobf("curse.maven:pneumaticcraft_repressurized-281849:3682893")
    //runtimeOnly fg.deobf("curse.maven:patchouli-306770:3680301")
    //runtimeOnly fg.deobf("curse.maven:waystones-245755:3684732")
    //runtimeOnly fg.deobf("curse.maven:balm-531761:3710117")

    // 1.18.1
    //runtimeOnly fg.deobf("curse.maven:better_dungeons-510089:3659567")
    //runtimeOnly fg.deobf("curse.maven:endremastered-404183:3600701")
    //runtimeOnly fg.deobf("curse.maven:terralith-513688:3606078")
    //runtimeOnly fg.deobf("curse.maven:hexerei-548599:3562165")
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.jarJar.configure {
    classifier ''
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "TelepathicGrunt",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}+${mc_version}",
                "Implementation-Vendor" :"TelepathicGrunt",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar

            pom {
                name = 'RepurposedStructures-Forge'
                description = 'Adds more variations of vanilla structures and features such as a Jungle Fortress!'
                url = 'https://github.com/TelepathicGrunt/RepurposedStructures'

                scm {
                    connection = 'git:https://github.com/TelepathicGrunt/RepurposedStructures.git'
                    developerConnection = 'git:https://github.com/TelepathicGrunt/RepurposedStructures.git'
                    url = 'https://github.com/TelepathicGrunt/RepurposedStructures'
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://github.com/TelepathicGrunt/RepurposedStructures/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'telepathic_grunt'
                        name = 'TelepathicGrunt'
                        email = 'asarnesespam@gmail.com'
                    }
                }
            }

        }
    }

    repositories {
        maven {
            url = uri("https://nexus.resourcefulbees.com/repository/telepathicgrunt/")
            credentials {
                username "$System.env.MAVEN_USER"
                password "$System.env.MAVEN_PASS"
            }
        }
    }
}

String fileContents = new File("./", "CHANGELOG.md").getText('UTF-8')

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGEKEY"
    int projectId = 368293

    def mainFile = upload(projectId, jar)
    mainFile.changelog = fileContents
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.displayName = "Repurposed Structures v${project.mod_version} (${project.mc_version} MC)"
    mainFile.addGameVersion("1.19")
    mainFile.addGameVersion("1.19.1")
    mainFile.addGameVersion("1.19.2")
    //mainFile.addOptional("async-locator")
}

modrinth {
    token = System.getenv("MODRINTH")
    versionName = "Repurposed Structures"
    versionNumber = project.version
    projectId = "QDNS5oAT"
    uploadFile = jar
    changelog = fileContents
    versionType = "RELEASE"
    gameVersions = ["1.19"]
    gameVersions = ["1.19.1"]
    gameVersions = ["1.19.2"]
    loaders = ["forge"]
}

task checkForRefmap() {
    if (file("./build/libs/repurposed_structures_forge-${project.mod_version}+${project.mc_version}.jar").exists()) {
        assert zipTree("./build/libs/repurposed_structures_forge-${project.mod_version}+${project.mc_version}.jar")
                .matching { include "repurposed_structures.refmap.json" }.getSingleFile() != null
    }
}

task buildAndRelease{}
tasks.checkForRefmap.mustRunAfter tasks.build
tasks.publish.mustRunAfter tasks.checkForRefmap
tasks.publishCurseForge.mustRunAfter tasks.publish
tasks.modrinth.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.build, tasks.checkForRefmap, tasks.publish, tasks.publishCurseForge, tasks.modrinth)